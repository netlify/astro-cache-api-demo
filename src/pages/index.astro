---
import Layout from '../layouts/Layout.astro';
import AnimatedHeader from '../components/AnimatedHeader.astro';
---

<Layout>
	<AnimatedHeader />
	<div class="container">
		<h1 class="main-title">Netlify Cache API</h1>
		<div class="intro-block">
			<p class="intro-paragraph">You're about to embark on a journey to the far reaches of our galaxy.</p>
			<p class="intro-paragraph">Before liftoff, we'll gather your mission data through a series of API calls. The faster we complete them, the sooner you launch into space.</p>
			<p class="intro-paragraph">That's where the <span class="cache-link"><a href="https://docs.netlify.com/platform/cache-api/" target="_blank" rel="noopener">Netlify Cache API</a></span> comes in.</p>
			<p class="intro-paragraph">We'll show you the different HTTP requests being made ‚Äî and how much time you save with caching.</p>
			<p class="intro-paragraph">Godspeed, explorer!</p>
		</div>
		<div class="form wide-form-section">
  <div class="input-wrapper fancy-input-wrapper wide-form-section" style="flex-direction:column;align-items:stretch;gap:0.7rem;">
  <label for="location-input" class="astro-label" style="font-size:1.25rem;font-family:'Space Mono',monospace;font-weight:700;margin-bottom:0.1rem;">Enter your location</label>
  <div style="display:flex;align-items:center;gap:0.7rem;width:100%;">
    <input id="location-input" class="astro-input wide-input big-coord-input" type="text" placeholder="Leave blank for Netlify HQ" autocomplete="off" />
    <button type="button" id="geo-btn" style="min-width: 80px" class="astro-geolocate-btn small-geo-btn" title="Use my location" aria-label="Get current location">
      <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="2" x2="12" y2="6"/><line x1="12" y1="18" x2="12" y2="22"/><line x1="2" y1="12" x2="6" y2="12"/><line x1="18" y1="12" x2="22" y2="12"/></svg>
    </button>
    <div class="input-glow"></div>
  </div>
</div>
  <div class="buttons">
    <button id="fetch-btn" class="primary">Generate mission</button>
  </div>
</div>
		<div id="ship-console" class="terminal">
			<div class="terminal-header">
				<div class="terminal-controls">
					<span></span>
					<span></span>
					<span></span>
				</div>
				<div class="terminal-title">SHIP CONSOLE OUTPUT</div>
			</div>
			<div class="terminal-content">
				<div class="terminal-lines" id="terminal-output">
					<div class="terminal-line">Select your location by pressing the blue button, or leave blank to launch from the Netlify HQ.</div>
				</div>
				<div class="terminal-cursor"></div>
			</div>
		</div>
	</div>

<!-- Mission Data Section -->
<section class="mission-data-section">
  <h2 class="mission-title">Your mission</h2>
  <div class="mission-panels">
    <!-- Launch Location -->
    <div class="mission-panel">
      <h3 class="mission-panel-title">üöÄ Launchpad</h3>
      <div class="mission-panel-subtitle">Where you're launching from</div>
      <ul class="mission-list">
        <li><span class="mission-label">Body name:</span> <span class="mission-value" data-key="launchname"></span></li>
				<li><span class="mission-label">Latitude:</span> <span class="mission-value" data-key="launchlatitude"></span></li>
				<li><span class="mission-label">Longitude:</span> <span class="mission-value" data-key="launchlongitude"></span></li>
				<li><span class="mission-label">Elevation:</span> <span class="mission-value" data-key="launchelevation"></span></li>
        <li><span class="mission-label">Distance from Netlify HQ:</span> <span class="mission-value" data-key="distance"></span></li>
        <li><span class="mission-label">Sun rise time:</span> <span class="mission-value" data-key="sunrise"></span></li>
        <li><span class="mission-label">Sun set time:</span> <span class="mission-value" data-key="sunset"></span></li>
        <li><span class="mission-label">Moon phase:</span> <span class="mission-value" data-key="moonphase"></span></li>
        <li><span class="mission-label">Temperature:</span> <span class="mission-value" data-key="weather"></span></li>
      </ul>
    </div>
    <!-- Destination -->
    <div class="mission-panel">
      <h3 class="mission-panel-title">ü™ê Destination</h3>
      <div class="mission-panel-subtitle">Where you're going</div>
      <ul class="mission-list">
        <li><span class="mission-label">Body name:</span> <span class="mission-value" data-key="planet"></span></li>
        <li><span class="mission-label">Volume:</span> <span class="mission-value" data-key="volume"></span></li>
        <li><span class="mission-label">Mass:</span> <span class="mission-value" data-key="mass"></span></li>
        <li><span class="mission-label">Gravity:</span> <span class="mission-value" data-key="gravity"></span></li>
				<li><span class="mission-label">Density:</span> <span class="mission-value" data-key="density"></span></li>
				<li><span class="mission-label">Escape velocity:</span> <span class="mission-value" data-key="escape"></span></li>
      </ul>
    </div>
    <!-- ISS Data -->
    <div class="mission-panel">
      <h3 class="mission-panel-title">üõ∞Ô∏è International Space Station</h3>
      <div class="mission-panel-subtitle">Pit stop for coffee</div>
      <ul class="mission-list">
        <li><span class="mission-label">Latitude:</span> <span class="mission-value" data-key="latitude"></span></li>
        <li><span class="mission-label">Longitude:</span> <span class="mission-value" data-key="longitude"></span></li>
        <li><span class="mission-label">Altitude:</span> <span class="mission-value" data-key="altitude"></span></li>
        <li><span class="mission-label">Velocity:</span> <span class="mission-value" data-key="velocity"></span></li>
				<li><span class="mission-label">Astronauts on board:</span> <span class="mission-value" data-key="isspeoplecount"></span></li>
				<li><span class="mission-label">Expedition number:</span> <span class="mission-value" data-key="issexpedition"></span></li>
				<li><span class="mission-label">End of expedition:</span> <span class="mission-value" data-key="issexpeditionend"></span></li>
      </ul>
    </div>
    <!-- Objects Scanned -->
    <div class="mission-panel">
      <h3 class="mission-panel-title">üî≠ Objects scanned</h3>
      <div class="mission-panel-subtitle">Watch out for these</div>
      <ul class="mission-list">
        <li><span class="mission-label">Planets:</span> <span class="mission-value" data-key="numplanets"></span></li>
        <li><span class="mission-label">Dwarf planets:</span> <span class="mission-value" data-key="numdwarfs"></span></li>
        <li><span class="mission-label">Asteroids:</span> <span class="mission-value" data-key="numasteroids"></span></li>
        <li><span class="mission-label">Comets:</span> <span class="mission-value" data-key="numcomets"></span></li>
        <li><span class="mission-label">Moons:</span> <span class="mission-value" data-key="nummoons"></span></li>
      </ul>
    </div>
  </div>
</section>

	<script>
		import { actions } from 'astro:actions';

    // Calculate distance between two lat/lon points using Haversine formula (returns meters)
    function haversineDistance(latStr: string, lonStr: string): number {
      const toRad = (deg: number) => deg * Math.PI / 180;
      const R = 6371000; // Earth radius in meters
      const lat1 = parseFloat(latStr);
      const lon1 = parseFloat(lonStr);
      const lat2 = 37.78288723962938;
      const lon2 = -122.39360711746808;
      const dLat = toRad(lat2 - lat1);
      const dLon = toRad(lon2 - lon1);
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                Math.sin(dLon/2) * Math.sin(dLon/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      return R * c;
    }

    // Mission data object
    let missionData: Record<string, string> = {
			launchname: "Earth",
      launchlatitude: "?",
			launchlongitude: "?",
      distance: "?",
      sunrise: "?",
      sunset: "?",
      moonphase: "?",
      weather: "?",
      planet: "?",
      volume: "?",
      mass: "?",
      gravity: "?",
			density: "?",
			escape: "?",
      latitude: "?",
      longitude: "?",
      altitude: "?",
      velocity: "?",
      numplanets: "?",
      numdwarfs: "?",
      numasteroids: "?",
      numcomets: "?",
      nummoons: "?",
			isspeoplecount: "?",
			issexpedition: "?",
			issexpeditionend: "?"
    };
		
		const fetchBtn = document.getElementById("fetch-btn") as HTMLButtonElement;
    const terminal = document.getElementById("terminal-output");
		const cursor = document.querySelector(".terminal-cursor")

    const locationInput = document.getElementById("location-input") as HTMLInputElement;
    const geoBtn = document.getElementById("geo-btn") as HTMLButtonElement;

		let userCoordinates = parseCoordinates(locationInput.value);
		const netlifyCoordinates = {
			latitude: 37.78288723962938,
			longitude: -122.39360711746808
		}

		document.querySelectorAll(".celestial-body").forEach(el => {
			el.addEventListener("click", () => {
				const name = el.getAttribute('data-name') || undefined;

				document.getElementById('ship-console')?.scrollIntoView({ behavior: 'smooth', block: 'center' });

				generateMissionData(name);
			})
  	})

    geoBtn.addEventListener('click', () => {
      if (!navigator.geolocation) {
				addTerminalLine(`> Could not get your location. Launching from Netlify HQ...`);

				return;
			}

			addTerminalLine(`> Trying to get your location...`);

      geoBtn.disabled = true;
      geoBtn.innerHTML = `<span style='font-size:1rem;'>...</span>`;
      navigator.geolocation.getCurrentPosition(
        (pos) => {
					addTerminalLine(`Location retrieved. Click on "Generate mission" to launch.`);

					userCoordinates = pos.coords

          locationInput.value = `${pos.coords.latitude}, ${pos.coords.longitude}`;
          geoBtn.innerHTML = `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="2" x2="12" y2="6"/><line x1="12" y1="18" x2="12" y2="22"/><line x1="2" y1="12" x2="6" y2="12"/><line x1="18" y1="12" x2="22" y2="12"/></svg>`;
          geoBtn.disabled = false;
        },
        () => {
					addTerminalLine(`Could not get your location. Click on "Generate mission" to launch from Netlify HQ.`);

          geoBtn.innerHTML = `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="10"/><line x1="12" y1="2" x2="12" y2="6"/><line x1="12" y1="18" x2="12" y2="22"/><line x1="2" y1="12" x2="6" y2="12"/><line x1="18" y1="12" x2="22" y2="12"/></svg>`;
          geoBtn.disabled = false;
        },
        { enableHighAccuracy: true, timeout: 10000 }
      );
    });

    function addTerminalLine(text: string, type: 'text' | 'input' | 'output' | 'error' | 'break' = 'text') {
      const line = document.createElement('div');
      line.className = `terminal-line ${type}`;
      line.textContent = text;
      line.style = "min-height: 1rem"
      terminal?.appendChild(line);
      terminal?.scrollTo(0, terminal.scrollHeight);

			return line
    }

    const addTerminalProgressBar = async (numIncrements: number, time: number) => {
      const terminal = document.querySelector('.terminal-lines') as HTMLElement;
			const maxWidth = terminal.offsetWidth;
			const maxCharacters = Math.floor(maxWidth / 8.82);
			const line = document.createElement('div');
			line.classList.add('terminal-line');
			terminal?.appendChild(line);

			const charactersToPrint = Math.max((numIncrements * maxCharacters) / 100, 1);
			const timePerIncrement = time / 100;

			let incrementCount = 0

			return new Promise(resolve => {
				const interval = setInterval(() => {
					if (incrementCount < charactersToPrint) {
						line.textContent += '#';
						incrementCount++;
					} else {
						if (terminal) terminal.scrollTop = terminal.scrollHeight;
						clearInterval(interval);

						resolve(null)
					}
					if (terminal) terminal.scrollTop = terminal.scrollHeight;
				}, timePerIncrement);
			})
		};

		async function fetchData(url: string, durations: {cached: number, uncached: number}, dataMapper: (data: any) => Record<string, string>) {
			addTerminalLine("", "break");
			addTerminalLine(`> Fetching "${url}"...`, 'output');

			const res = await actions.fetch({ url: url });

			if (res.data && !res.data.error) {
				durations.cached += res.data?.duration?.cached;
				durations.uncached += res.data?.duration?.uncached;
				
				missionData = {
					...missionData,
					...dataMapper(res.data)
				}

				addTerminalLine(`Network: ${res.data?.duration?.uncached}ms / Cache API: ${res.data?.duration?.cached}ms`);

				return;
			}

			addTerminalLine(`Resource is unavailable`, "error");
		}

		function parseCoordinates(value: string) {
			const parts = value.split(",").map(part => part.trim());

			if (parts.length !== 2) {
				return
			}

			const latitude = Number.parseFloat(parts[0])
			const longitude = Number.parseFloat(parts[1])

			if (Number.isNaN(latitude) || Number.isNaN(longitude)) {
				return
			}

			return {
				latitude,
				longitude
			}
		}

		async function generateMissionData(destination?: string) {
			if (destination) {
				addTerminalLine("", "break");
				addTerminalLine(`> System override: setting destination to ${destination}...`, 'output');

				if (destination === "Earth") {
					addTerminalLine("You're already on Earth. No need for caching in local development!", "error");

					return;
				} else {
					await new Promise(resolve => {
						setTimeout(resolve, 3_000);
					});
				}
			}

			const durations = {
				cached: 0,
				uncached: 0
			};

			let launchLocation = userCoordinates ? "user location" : "Netlify HQ";

			if (!userCoordinates && locationInput.value) {
				await fetchData(`https://geocoding-api.open-meteo.com/v1/search?name=${locationInput.value}&count=1&language=en&format=json`, durations, (data) => {
					const [result] = data?.results;

					if (result) {
						launchLocation = result.country;

						userCoordinates = {
							latitude: result.latitude,
							longitude: result.longitude
						}
					}

					return {}
				})
			}
			
			addTerminalLine("", "break");
			addTerminalLine(`Launch location set to ${launchLocation}.`, 'text');		

			const coords = userCoordinates || netlifyCoordinates

			missionData.launchlatitude = `${coords.latitude}¬∞`
			missionData.launchlongitude = `${coords.longitude}¬∞`

			const {latitude: lat, longitude: long} = coords

			const hqDistance = Math.round(haversineDistance(lat.toString(), long.toString()));
			missionData.distance = hqDistance === 0 ? "0 üéØ" : `${hqDistance / 1000} km`;

			await fetchData(`https://aa.usno.navy.mil/api/rstt/oneday?date=2016-12-1%20&coords=${lat},%20${long}`, durations, (data) => {
				const moonphase = data?.properties?.data?.curphase
				const sunrise = data?.properties?.data?.sundata?.find(({phen}: {phen: string}) => phen === "Rise")
				const sunset = data?.properties?.data?.sundata?.find(({phen}: {phen: string}) => phen === "Set")

				return {
					moonphase,
					sunrise: sunrise?.time,
					sunset: sunset?.time
				}
			})

			await fetchData(`https://api.open-meteo.com/v1/elevation?latitude=${lat}&longitude=${long}`, durations, (data) => ({
				launchelevation: `${data?.elevation} m`
			}))
			
			await fetchData(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${long}&current=temperature_2m,is_day,apparent_temperature`, durations, (data) => ({
				weather: `${data?.current?.temperature_2m}${data?.current_units?.temperature_2m} (feels like ${data?.current?.apparent_temperature}${data?.current_units?.apparent_temperature})`
			}))

			await fetchData("https://api.wheretheiss.at/v1/satellites/25544", durations, (data) => ({
				latitude:`${data?.latitude}¬∞`,
				longitude:`${data?.longitude}¬∞`,
				altitude:`${data?.altitude} km`,
				velocity:`${data?.velocity} km/s`,
			}))

			await fetchData("https://api.le-systeme-solaire.net/rest/knowncount/", durations, (data) => {
				const numplanets = data?.knowncount?.find((body: { id: string; }) => body.id === "planet")
				const numdwarfs = data?.knowncount?.find((body: { id: string; }) => body.id === "dwarfPlanet")
				const numasteroids = data?.knowncount?.find((body: { id: string; }) => body.id === "asteroid")
				const numcomets = data?.knowncount?.find((body: { id: string; }) => body.id === "comet")
				const nummoons = data?.knowncount?.find((body: { id: string; }) => body.id === "moonsPlanet")

				return {
					numplanets: numplanets?.knownCount.toString(),
					numdwarfs: numdwarfs?.knownCount.toString(),
					numasteroids: numasteroids?.knownCount.toString(),
					numcomets: numcomets?.knownCount.toString(),
					nummoons: nummoons?.knownCount.toString()
				}
			})

			await fetchData("https://space-bodies-api.deno.dev", durations, (data) => {
				let body: any

				if (destination) {
					body = data?.bodies.find((body: { englishName: string }) => body.englishName === destination)
				} else {
					const candidates = data?.bodies?.filter((body: { id: string; vol: { volValue: number; volExponent: number; }; mass: { massValue: number; massExponent: number; }; gravity: number; density: number; escape: number; }) => body.id !== "terre" && body.vol && body.mass && body.gravity && body.density && body.escape) || []
					const index = Math.floor((Math.random() * candidates.length))
					
					body = candidates[index]
				}

				if (body) {
					return {
						planet: body.englishName || "?",
						volume: `${body.vol.volValue} √ó 10<sup>${body.vol.volExponent}</sup> km¬≥` ,
						mass: `${body.mass.massValue} √ó 10<sup>${body.mass.massExponent}</sup> kg` ,
						gravity: `${body.gravity} m/s`,
						density: `${body.density} g/cm¬≥`,
						escape: `${body.escape} m/s`,
					}
				}

				return {} as Record<string, string>
			})

			await fetchData("https://corquaid.github.io/international-space-station-APIs/JSON/people-in-space.json", durations, (data) => ({
				isspeoplecount: data?.number.toString(),
				issexpedition: data?.iss_expedition.toString(),
				issexpeditionend: new Date(data?.expedition_end_date * 1000).toUTCString()
			}));

			(cursor as HTMLElement).style.display = "none";

			durations.cached = Math.max(durations.cached, 1);

			addTerminalLine("", "break");
			addTerminalLine("", "break");

			let duration1: HTMLElement
			let duration2: HTMLElement

			addTerminalLine(`No cache`, 'input');
			const progress1 = addTerminalProgressBar(100, durations.uncached).then(() => {
				duration1.textContent = `${durations.uncached}ms`
			});
			
			duration1 = addTerminalLine("...", 'text');
			addTerminalLine("", "break");

			const percentage = ((durations.cached * 100) / durations.uncached) || 1

			addTerminalLine(`With Cache API`, 'input');
			const progress2 = addTerminalProgressBar(percentage, durations.cached).then(() => {
				duration2.textContent = `${durations.cached}ms`;
			})
			
			duration2 = addTerminalLine("...", 'text');
			addTerminalLine("", "break");

			const deltaEl = addTerminalLine(" ", 'input');

			await progress1;
			await progress2;

			const delta = Math.round(durations.uncached / durations.cached);
			deltaEl.textContent = `Lift off ~${delta}x faster! üöÄ`

			await new Promise(resolve => {
				setTimeout(resolve, 2_000)
			})

			// Smooth scroll to Mission Data section
			const missionSection = document.querySelector('.mission-data-section');
			if (missionSection) {
				missionSection.scrollIntoView({ behavior: 'smooth', block: 'start' });
			}

			// Typing animation for mission data values
			const values = Array.from(document.querySelectorAll('.mission-value'));
			let valueDelay = 0;
			values.forEach((el, idx) => {
				el.innerHTML = '';
				const key = el.getAttribute('data-key');
				if (!key || !(key in missionData)) return;
				const raw = missionData[key] || "";
				// Pre-calculate and reserve space to prevent layout shift
				let tempSpan = document.createElement('span');
				tempSpan.style.visibility = 'hidden';
				tempSpan.style.position = 'absolute';
				tempSpan.style.whiteSpace = 'pre';
				tempSpan.style.fontFamily = 'Space Mono, monospace';
				tempSpan.innerHTML = raw; // use full HTML for accurate width
				document.body.appendChild(tempSpan);
				(el as HTMLElement).style.display = 'inline-block';
				(el as HTMLElement).style.minWidth = tempSpan.offsetWidth + 'px';
				document.body.removeChild(tempSpan);
				// If the value contains HTML (like <sup>), use a temp element
				let chars: Array<{text: string, html: boolean}> = [];
				if (raw.includes('<')) {
					// Parse HTML string into text and tags
					let temp = document.createElement('div');
					temp.innerHTML = raw;
					function walk(node: Node) {
						if (node.nodeType === Node.TEXT_NODE) {
							chars.push({text: node.textContent || '', html: false});
						} else if (node.nodeType === Node.ELEMENT_NODE) {
							chars.push({text: (node as HTMLElement).outerHTML, html: true});
						}
					}
					temp.childNodes.forEach(walk);
				} else {
					chars = raw.split('').map((c: string) => ({text: c, html: false}));
				}
				let i = 0;
				function typeChar() {
					if (i < chars.length) {
						if (chars[i].html) {
							el.innerHTML += chars[i].text;
						} else {
							el.innerHTML += chars[i].text.replace(/ /g, '&nbsp;');
						}
						i++;
						setTimeout(typeChar, 22);
					}
				}
				setTimeout(typeChar, valueDelay);
				// Stagger each value
				valueDelay += Math.max(350, chars.length * 22 + 80);
			});
		}

    fetchBtn?.addEventListener('click', async (event) => {
			event.preventDefault();
			
			// Scroll to the ship console
			document.getElementById('ship-console')?.scrollIntoView({ behavior: 'smooth', block: 'center' });
			
			await generateMissionData();
		});
	</script>
  <footer style="text-align: center; padding: 2rem 0; font-family: 'Space Mono', monospace; color: var(--color-accent); font-size: 0.9rem;">
    Vibe-coded on <a href="https://astro.build/" target="_blank" rel="noopener" style="color: var(--color-primary);">Astro</a> with <a href="https://windsurf.com/" target="_blank" rel="noopener" style="color: var(--color-primary);">Windsurf</a>
		<a class="dtn" href="https://app.netlify.com/start/deploy?repository=https://github.com/netlify/astro-cache-api-demo"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify"></a>
  </footer>
</Layout>

<style is:global>
	.dtn {
		display: block;
		margin-top: 30px;
	}

  .fancy-input-wrapper {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 0.5rem;
    justify-content: center;
  }
  .api-base-url {
    font-size: 1.35rem;
    color: var(--color-accent);
    letter-spacing: 0.02em;
    font-family: 'Space Mono', monospace;
    padding-right: 0.2em;
    text-shadow: 0 0 8px var(--color-accent), 0 0 2px #fff;
  }
  .astro-select {
    appearance: none;
    background: linear-gradient(90deg, var(--color-primary) 60%, var(--color-accent) 100%);
    color: var(--color-text);
    padding: 0.7rem 2.8rem 0.7rem 0.8rem; /* Add more right padding for arrow */
    border: 2px solid var(--color-accent);
    border-radius: 16px;
    font-size: 1.25rem;
    font-family: 'Space Mono', monospace;
    font-weight: 700;
    box-shadow: 0 0 20px 0 rgba(0,255,224,0.25), 0 0 0 4px rgba(255,255,255,0.08) inset;
    outline: none;
    transition: border 0.2s, box-shadow 0.2s;
    min-width: 6.5ch;
    width: 6.5ch;
    cursor: pointer;
    position: relative;
    z-index: 1;
    background-clip: padding-box;
  }
  .wide-select {
    width: 100%;
    min-width: 340px;
    max-width: 100%;
    display: block;
    /* Hide default arrow in most browsers */
    background-image: none;
  }
  .select-arrow-wrapper {
    position: relative;
  }
  .select-arrow {
    pointer-events: none;
    position: absolute;
    right: 18px;
    top: 50%;
    transform: translateY(-50%);
    width: 1.2em;
    height: 1.2em;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 2;
  }
  .select-arrow::before {
    content: '';
    display: block;
    width: 0;
    height: 0;
    border-left: 0.45em solid transparent;
    border-right: 0.45em solid transparent;
    border-top: 0.6em solid #fff;
    filter: drop-shadow(0 0 2px var(--color-accent));
  }

  .wide-select option:first-child {
    font-size: 1.05rem;
    color: #bbb;
  }
  .astro-select:focus {
    border-color: #fff;
    box-shadow: 0 0 30px 0 var(--color-accent), 0 0 0 6px rgba(0,255,224,0.25) inset;
  }
  .astro-select::-ms-expand {
    display: none;
  }
  .astro-select option {
    background: #1c1f2a;
    color: var(--color-text);
    font-size: 1.1rem;
  }
  /* Custom dropdown arrow */
  .astro-select {
    background-image:
      linear-gradient(90deg, var(--color-primary) 60%, var(--color-accent) 100%),
      url('data:image/svg+xml;utf8,<svg fill="%23B4F5E0" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M7 10l5 5 5-5z"/></svg>');
    background-repeat: no-repeat, no-repeat;
    background-position: right 0 center, right 0.75rem center;
    background-size: 100% 100%, 1.5rem 1.5rem;
  }
  .astro-radio-group {
    display: flex;
    gap: 2.5rem;
    justify-content: center;
    margin-bottom: 1.2rem;
  }
  .astro-radio-label {
    display: flex;
    align-items: center;
    gap: 0.2rem;
    font-size: 0.89rem;
    font-family: 'Space Mono', monospace;
    color: var(--color-accent);
    letter-spacing: 0.02em;
    cursor: pointer;
    position: relative;
    padding: 0.08em 0.4em;
    border-radius: 8px;
    background: rgba(0,255,224,0.025);
    box-shadow: 0 0 4px 0 rgba(0,255,224,0.04);
    transition: background 0.2s, box-shadow 0.2s;
  }

  button:not(:disabled):hover {
    transform: translateY(-2px);
    background: var(--color-secondary);
    box-shadow: 0 0 20px rgba(94, 23, 235, 0.4);
  }

  button.primary {
    background: rgba(255, 94, 186, 0.1);
    border-color: var(--color-primary);
  }

  .container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 3rem;
    padding: 2rem 0;
    width: 100%;
  }

  .cosmic-section {
    position: relative;
    width: 100%;
    height: 200px;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .orbit {
    position: relative;
    width: 300px;
    height: 300px;
    border: 2px solid rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    animation: float 6s ease-in-out infinite;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .orbit::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 320px;
    height: 320px;
    border-radius: 50%;
    background: radial-gradient(circle, var(--color-accent) 0%, rgba(0,255,224,0) 70%);
    transform: translate(-50%, -50%);
    opacity: 0.1;
    filter: blur(20px);
  }
  .astro-radio:focus {
    border-color: #fff;
    box-shadow: 0 0 30px 0 var(--color-accent), 0 0 0 6px rgba(0,255,224,0.18) inset;
  }
  .astro-radio + span {
    font-size: 0.89rem;
    color: var(--color-accent);
    font-family: 'Space Mono', monospace;
    font-weight: 500;
    text-shadow: 0 0 3px var(--color-accent), 0 0 1px #fff;
  }

	.container {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 3rem;
		padding: 2rem 0;
		width: 100%;
	}

	.cosmic-section {
		position: relative;
		width: 100%;
		height: 200px;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.orbit {
		position: relative;
		width: 300px;
		height: 300px;
		border: 2px solid rgba(255, 255, 255, 0.1);
		border-radius: 50%;
		animation: float 6s ease-in-out infinite;
		display: flex;
		justify-content: center;
		align-items: center;
	}

	.orbit::before {
		content: '';
		position: absolute;
		top: 50%;
		left: 50%;
		width: 320px;
		height: 320px;
		border-radius: 50%;
		background: radial-gradient(circle, var(--color-accent) 0%, rgba(0,255,224,0) 70%);
		transform: translate(-50%, -50%);
		opacity: 0.1;
		filter: blur(20px);
	}

	.logos {
		display: flex;
		align-items: center;
		gap: 2rem;
		position: relative;
	}

	.connector {
		width: 60px;
		height: 2px;
		background: linear-gradient(to right, var(--color-primary), var(--color-accent));
		position: relative;
	}

	.connector::before, .connector::after {
		content: '';
		position: absolute;
		width: 6px;
		height: 6px;
		border-radius: 50%;
		background: var(--color-accent);
		top: 50%;
		transform: translateY(-50%);
		animation: twinkle 2s infinite;
	}

	.connector::before { left: -3px; }
	.connector::after { right: -3px; }

	.logo {
		width: 100px;
		height: 100px;
		object-fit: contain;
		transition: transform 0.3s ease;
	}

	.logo:hover {
		transform: scale(1.1);
	}

	.plus {
		font-size: 3rem;
		font-weight: 600;
		color: var(--color-accent);
		text-shadow: 0 0 10px var(--color-accent);
		animation: twinkle 3s infinite;
	}

	h1 {
		font-size: 4rem;
		margin: 0;
		background: linear-gradient(to right, var(--color-primary), var(--color-accent));
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		text-align: center;
		text-shadow: 0 0 20px rgba(255, 94, 186, 0.3);
	}

	.form {
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
		width: 100%;
		max-width: 500px;
	}

	.input-wrapper {
		position: relative;
	}

	.input-glow {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background: var(--color-primary);
		opacity: 0.2;
		filter: blur(20px);
		border-radius: 12px;
		z-index: -1;
	}

	input {
		padding: 1.2rem;
		border: 2px solid var(--color-primary);
		border-radius: 12px;
		background: rgba(255, 94, 186, 0.1);
		color: var(--color-text);
		font-size: 1.1rem;
		font-family: inherit;
		width: 100%;
		transition: all 0.3s ease;
		box-shadow: 0 0 20px rgba(255, 94, 186, 0.2);
	}

	input:focus {
		outline: none;
		border-color: var(--color-accent);
		box-shadow: 0 0 30px rgba(0, 255, 224, 0.3);
	}

	input::placeholder {
		color: rgba(255, 255, 255, 0.5);
	}

	.buttons {
		display: flex;
		gap: 1rem;
		flex-wrap: wrap;
	}

	button {
		padding: 1rem 1.5rem;
		border: 2px solid var(--color-secondary);
		border-radius: 12px;
		background: rgba(94, 23, 235, 0.1);
		color: var(--color-text);
		font-family: inherit;
		font-size: 1rem;
		cursor: pointer;
		transition: all 0.3s ease;
		flex: 1;
		min-width: 200px;
		position: relative;
	}

	button:not(:disabled):hover {
		transform: translateY(-2px);
		background: var(--color-secondary);
		box-shadow: 0 0 20px rgba(94, 23, 235, 0.4);
	}

	button.primary {
		background: rgba(255, 94, 186, 0.1);
		border-color: var(--color-primary);
	}

	button.primary:not(:disabled):hover {
		background: var(--color-primary);
		box-shadow: 0 0 20px rgba(255, 94, 186, 0.4);
	}
	.terminal {
		width: 100%;
		margin-top: 50px;
		max-width: 600px;
		background: rgba(0, 0, 0, 0.7);
		border-radius: 12px;
		border: 1px solid var(--color-accent);
		overflow: hidden;
		box-shadow: 0 0 30px rgba(0, 255, 224, 0.2);
	}

	.terminal-header {
		background: rgba(0, 255, 224, 0.1);
		padding: 0.75rem;
		display: flex;
		align-items: center;
		border-bottom: 1px solid var(--color-accent);
	}

	.terminal-controls {
		display: flex;
		gap: 0.5rem;
		margin-right: 1rem;
	}

	.terminal-controls span {
		width: 12px;
		height: 12px;
		border-radius: 50%;
		background: var(--color-accent);
		opacity: 0.5;
	}

	.terminal-title {
		color: var(--color-accent);
		font-size: 0.875rem;
		font-weight: 600;
		text-transform: uppercase;
		letter-spacing: 0.1em;
	}

	.terminal-content {
		padding: 1rem;
		position: relative;
		min-height: 150px;
		max-height: 300px;
	}

	.terminal-lines {
		max-height: 250px;
		overflow-y: auto;
		font-family: 'Space Mono', monospace;
		font-size: 0.9rem;
		line-height: 1.5;
	}

	.terminal-line {
		min-height: 1rem;
		margin-bottom: 0.5rem;
		color: #B4F5E0;
		white-space: pre-wrap;
	}
	.terminal-lines .terminal-line.input {
		color: var(--color-accent) !important;
	}

	.terminal-line.text {
		color: white;
	}

	.terminal-line.error {
		color: #FF6B6B;
	}

	.terminal-line.break {
		min-height: 1rem;
	}

	.terminal-cursor {
		bottom: 1rem;
		width: 8px;
		height: 16px;
		background: var(--color-accent);
		animation: blink 1s infinite;
	}

	@keyframes blink {
		0%, 100% { opacity: 1; }
		50% { opacity: 0; }
	}
	.intro-block {
		max-width: 600px;
		width: 100%;
		margin: 0 auto 2.2rem auto;
		display: flex;
		flex-direction: column;
		gap: 1.2rem;
		background: linear-gradient(120deg, #131726 85%, rgba(0,255,224,0.10) 100%);
		border: 2.5px solid var(--color-accent);
		border-radius: 18px;
		box-shadow: 0 0 60px 0 rgba(0,255,224,0.18), 0 0 0 6px rgba(85,255,224,0.12) inset, 0 0 24px 0 #0e1120 inset;
		padding: 2.1rem 2rem 2.1rem 2rem;
		align-items: center;
		opacity: 0.99;
		position: relative;
		/* Subtle star background effect */
		overflow: hidden;
	}
	.intro-block::before {
		content: "";
		position: absolute;
		inset: 0;
		pointer-events: none;
		background: repeating-radial-gradient(circle at 80% 20%, #55ffe020 1px, transparent 2px, transparent 30px),
			repeating-radial-gradient(circle at 20% 80%, #fff2 1px, transparent 2px, transparent 40px);
		z-index: 0;
	}
	.intro-paragraph {
		max-width: 600px;
		width: 100%;
		font-family: 'Space Mono', monospace;
		font-size: 1.15rem;
		color: #b4f5e0;
		margin-bottom: 0.2em;
		margin-top: 0;
		text-shadow: 0 0 10px #55ffe0, 0 0 2px #fff;
		line-height: 1.7;
		z-index: 1;
		background: transparent;
	}
	.cache-link a {
		color: var(--color-accent);
		text-decoration: underline;
		font-weight: 900;
		text-shadow: 0 0 12px var(--color-accent), 0 0 2px #fff;
		transition: color 0.2s, text-shadow 0.2s;
		letter-spacing: 0.02em;
	}
	.cache-link a:hover {
		color: #fff;
		text-shadow: 0 0 24px var(--color-accent), 0 0 4px #fff;
	}
	.mission-data-section {
		margin: 3.5rem auto 2rem auto;
		width: 600px;
		max-width: 95vw;
		box-sizing: border-box;
		background: linear-gradient(110deg, #181c24 80%, rgba(0,255,224,0.08) 100%);
		border: 2.5px solid var(--color-accent);
		border-radius: 18px;
		box-shadow: 0 0 40px 0 rgba(0,255,224,0.11), 0 0 0 4px rgba(255,255,255,0.07) inset;
		padding: 2rem 1.3rem 2rem 1.3rem;
		display: flex;
		flex-direction: column;
		align-items: center;
		opacity: 0.98;
	}
	.wide-form-section {
		width: 100%;
		max-width: 600px;
		box-sizing: border-box;
		margin-left: auto;
		margin-right: auto;
		display: flex;
		flex-direction: column;
	}
	.form.wide-form-section {
		box-sizing: border-box;
		margin-left: auto;
		margin-right: auto;
		display: flex;
		flex-direction: column;
	}
	.input-wrapper.fancy-input-wrapper {
		width: 100%;
	}
	.buttons {
		width: 100%;
		display: flex;
		justify-content: flex-end;
	}
	.input-wrapper.fancy-input-wrapper > div[style*='width:100%'] {
		width: auto !important;
		flex: 1 1 0%;
		min-width: 0;
	}
	.mission-title {
		font-family: 'Space Mono', monospace;
		font-size: 2.1rem;
		font-weight: 800;
		color: var(--color-accent);
		letter-spacing: 0.08em;
		margin-bottom: 2.1rem;
		text-shadow: 0 0 12px var(--color-accent), 0 0 2px #fff;
		text-align: center;
	}
	.mission-panels {
		display: flex;
		flex-direction: column;
		gap: 1.7rem;
		width: 100%;
		align-items: center;
	}
	.mission-panel {
		background: rgba(28,31,42,0.97);
		border-radius: 14px;
		/* No border for inner panels */
		box-shadow: 0 0 18px 0 rgba(0,255,224,0.09), 0 0 0 2px rgba(255,255,255,0.04) inset;
		width: 98%;
		min-width: 0;
		max-width: 100%;
		padding: 1.3rem 1.1rem 1.2rem 1.1rem;
		display: flex;
		flex-direction: column;
		align-items: flex-start;
	}
	@media (max-width: 950px) {
		.mission-data-section {
			width: 100%;
			max-width: 100vw;
			padding-left: 0.5rem;
			padding-right: 0.5rem;
		}
		.mission-panels {
			gap: 1.2rem;
		}
		.mission-panel {
			width: 100%;
			min-width: 0;
			max-width: 100%;
		}
	}
	.mission-panel-title {
		font-family: 'Space Mono', monospace;
		font-size: 1.18rem;
		font-weight: 700;
		color: var(--color-primary);
		margin-bottom: 0.45rem;
		letter-spacing: 0.05em;
		text-shadow: 0 0 4px var(--color-primary), 0 0 1px #fff;
		display: flex;
		align-items: center;
		gap: 0.45em;
	}
	.mission-panel-subtitle {
		font-family: 'Space Mono', monospace;
		font-size: 0.98rem;
		font-style: italic;
		color: #55ffe0;
		text-shadow: 0 0 6px #55ffe0, 0 0 1px #fff;
		margin-bottom: 1.1rem;
		margin-top: -0.15rem;
		padding-bottom: 0.2rem;
		letter-spacing: 0.04em;
		opacity: 0.97;
	}
	.mission-list {
		list-style: none;
		padding: 0;
		margin: 0;
		width: 100%;
	}
.input-wrapper.fancy-input-wrapper {
  width: 100%;
}
.buttons {
  width: 100%;
  display: flex;
  justify-content: flex-end;
}
.input-wrapper.fancy-input-wrapper > div[style*='width:100%'] {
  width: auto !important;
  flex: 1 1 0%;
  min-width: 0;
}
.mission-title {
  font-family: 'Space Mono', monospace;
  font-size: 2.1rem;
  font-weight: 800;
  color: var(--color-accent);
  letter-spacing: 0.08em;
  margin-bottom: 2.1rem;
  text-shadow: 0 0 12px var(--color-accent), 0 0 2px #fff;
  text-align: center;
}
.mission-panels {
  display: flex;
  flex-direction: column;
  gap: 1.7rem;
  width: 100%;
  align-items: center;
}
.mission-panel {
  background: rgba(28,31,42,0.97);
  border-radius: 14px;
  /* No border for inner panels */
  box-shadow: 0 0 18px 0 rgba(0,255,224,0.09), 0 0 0 2px rgba(255,255,255,0.04) inset;
  width: 98%;
  min-width: 0;
  max-width: 100%;
  padding: 1.3rem 1.1rem 1.2rem 1.1rem;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
}
@media (max-width: 950px) {
  .mission-data-section {
    width: 100%;
    max-width: 100vw;
    padding-left: 0.5rem;
    padding-right: 0.5rem;
  }
  .mission-panels {
    gap: 1.2rem;
  }
  .mission-panel {
    width: 100%;
    min-width: 0;
    max-width: 100%;
  }
}
.mission-panel-title {
  font-family: 'Space Mono', monospace;
  font-size: 1.18rem;
  font-weight: 700;
  color: var(--color-primary);
  margin-bottom: 0.45rem;
  letter-spacing: 0.05em;
  text-shadow: 0 0 4px var(--color-primary), 0 0 1px #fff;
  display: flex;
  align-items: center;
  gap: 0.45em;
}
.mission-panel-subtitle {
  font-family: 'Space Mono', monospace;
  font-size: 0.98rem;
  font-style: italic;
  color: #55ffe0;
  text-shadow: 0 0 6px #55ffe0, 0 0 1px #fff;
  margin-bottom: 1.1rem;
  margin-top: -0.15rem;
  padding-bottom: 0.2rem;
  letter-spacing: 0.04em;
  opacity: 0.97;
}
.mission-list {
  list-style: none;
  padding: 0;
  margin: 0;
  width: 100%;
}

.mission-list li {
	min-height: 28px;
}

.mission-label {
  font-family: 'Space Mono', monospace;
  font-size: 1.01rem;
  font-weight: 600;
  color: var(--color-accent);
  letter-spacing: 0.03em;
}
.mission-value {
  font-family: 'Space Mono', monospace;
  font-size: 1.01rem;
  font-weight: 400;
  color: #fff;
  letter-spacing: 0.02em;
  margin-left: 0.5em;
  word-break: break-word;
  display: inline-block;
  min-width: 2ch; /* fallback for animation */
  vertical-align: baseline;
}
.mission-panel ul li {
  margin-bottom: 0.7em;
  display: flex;
  flex-wrap: wrap;
  align-items: baseline;
}
.mission-panel ul li:last-child {
  margin-bottom: 0;
}
@media (max-width: 950px) {
  .mission-panels {
    flex-direction: column;
    gap: 2.2rem;
    align-items: center;
  }
  .mission-panel {
    width: 100%;
    max-width: 100%;
  }
}

